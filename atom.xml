<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>apollo</title>
  
  <link href="/hexo-blog.io/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-27T17:15:28.339Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Syoogool</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js基础系列之创建对象</title>
    <link href="http://yoursite.com/2017/11/28/js%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2017/11/28/js基础系列之创建对象/</id>
    <published>2017-11-27T16:02:05.870Z</published>
    <updated>2017-11-27T17:15:28.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建多个对象的背景"><a href="#创建多个对象的背景" class="headerlink" title="创建多个对象的背景"></a>创建多个对象的背景</h2><p>  使用Object构造函数和对象字面量都可以创建单个对象，但是如果创建很多个对象时，<br>  这些方法就不行了，会产生大量重复的代码，正式基于此产生了下面各种创建js对象的方法</p>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul>
<li><strong> 基本思想：</strong> 就是利用函数的课复用性，封装一个对象的具体实现过程</li>
<li><strong> 缺点： </strong> 没有解决对象识别问题</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  obj.name = name;</div><div class="line">  obj.age = age;</div><div class="line">  obj.job = job;</div><div class="line">  obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Jack = createPerson(<span class="string">'Jack'</span>, <span class="number">23</span>, <span class="string">'Student'</span>);</div><div class="line"><span class="keyword">var</span> Tom = createPerson(<span class="string">'Tom'</span>, <span class="number">36</span>, <span class="string">'Teacher'</span>);</div></pre></td></tr></table></figure>
<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><ul>
<li><strong> 基本思想： </strong>  利用构造函数能创建特定类型的对象（constructor属性识别对象类型）</li>
<li><strong> 缺点： </strong> 每个方法都要在每个实例桑重新创建一遍</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Jack = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">23</span>, <span class="string">'Student'</span>);</div><div class="line"><span class="keyword">var</span> Tom = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>, <span class="number">36</span>, <span class="string">'Teacher'</span>);</div></pre></td></tr></table></figure>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><ul>
<li><strong> 缺点：</strong> 原型的所有属性被多个实例共享<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="keyword">constructor</span>: Person,</div><div class="line">  name: "Jack",</div><div class="line">  age: 29,</div><div class="line">  job: "Student",</div><div class="line">  sayName: function() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="构造函数原型式"><a href="#构造函数原型式" class="headerlink" title="构造函数原型式"></a>构造函数原型式</h2><ul>
<li><strong>基本思想：</strong> 构造函数模式定义实例属性，原型模式定义方法</li>
<li><strong>优势：</strong> 目前使用最广泛的对象定义方式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.friends = [<span class="string">"Tom"</span>, <span class="string">"Jack"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="keyword">constructor</span>: Person,</div><div class="line">  sayName: function() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Jack = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">23</span>, <span class="string">'Student'</span>);</div><div class="line"><span class="keyword">var</span> Tom = <span class="keyword">new</span> Person(<span class="string">'Tom'</span>, <span class="number">36</span>, <span class="string">'Teacher'</span>);</div></pre></td></tr></table></figure>
<h2 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="comment">// 方法</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName !== <span class="string">"function"</span>) &#123;</div><div class="line">    Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Jack = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">23</span>, <span class="string">'Student'</span>);</div></pre></td></tr></table></figure>
<h2 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  obj.name = name;</div><div class="line">  obj.age = age;</div><div class="line">  obj.job = job;</div><div class="line">  obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> obj</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Jack = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">23</span>, <span class="string">'Student'</span>);</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure>
<h2 id="稳妥构造函数"><a href="#稳妥构造函数" class="headerlink" title="稳妥构造函数"></a>稳妥构造函数</h2><ul>
<li><strong>使用场景：</strong>由于没有公共属性，适合在一些安全性要求高的场景使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  obj.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Jack = person(<span class="string">'Jack'</span>, <span class="number">23</span>, <span class="string">'Student'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建多个对象的背景&quot;&gt;&lt;a href=&quot;#创建多个对象的背景&quot; class=&quot;headerlink&quot; title=&quot;创建多个对象的背景&quot;&gt;&lt;/a&gt;创建多个对象的背景&lt;/h2&gt;&lt;p&gt;  使用Object构造函数和对象字面量都可以创建单个对象，但是如果创建很多个对象时
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js常用代码记录</title>
    <link href="http://yoursite.com/2017/11/20/js%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/11/20/js常用代码记录/</id>
    <published>2017-11-20T05:34:06.955Z</published>
    <updated>2017-11-27T17:15:07.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用的事件监听器"><a href="#通用的事件监听器" class="headerlink" title="通用的事件监听器"></a>通用的事件监听器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventUtil = &#123;</div><div class="line">  addHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</div><div class="line">      element.addEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</div><div class="line">      element.attachEvent(<span class="string">'on'</span> + type, handler);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      element[<span class="string">'on'</span> + type] = handler;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  removeHandler: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (element.removeEventListener) &#123;</div><div class="line">      element.removeEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (element.datachEvent) &#123;</div><div class="line">      element.datachEvent(<span class="string">'on'</span> + type, handler);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">  &#125;,</div><div class="line">  preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (event.preventDefault) &#123;</div><div class="line">      event.preventDefault();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      event.returnValue = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (event.stopPropagation) &#123;</div><div class="line">      event.stopPropagation();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      event.cancelBubble = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="原生Ajax"><a href="#原生Ajax" class="headerlink" title="原生Ajax"></a>原生Ajax</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> xmlhttp;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;</div><div class="line">      <span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></div><div class="line">      xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">      <span class="comment">// IE6, IE5 浏览器执行代码</span></div><div class="line">      xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> xmlhttp;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> xmlhttp = createXHR();</div><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">true</span>);</div><div class="line">  xmlhttp.send();</div></pre></td></tr></table></figure>
<h2 id="模拟事件-鼠标事件"><a href="#模拟事件-鼠标事件" class="headerlink" title="模拟事件(鼠标事件)"></a>模拟事件(鼠标事件)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ele = ducument.getElementById(<span class="string">'myId'</span>);</div><div class="line"><span class="comment">//创建事件对象</span></div><div class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'MouseEvents'</span>);</div><div class="line"><span class="comment">// 初始化事件对象</span></div><div class="line">event.initMouseEvent(<span class="string">'click'</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="built_in">document</span>.defaultView, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="literal">null</span>);</div><div class="line"><span class="comment">// 触发事件</span></div><div class="line">event.dispatchEvent(event);</div></pre></td></tr></table></figure>
<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ele = ducument.getElementById(<span class="string">'myId'</span>);</div><div class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'CustomEvent'</span>);</div><div class="line">event.initCustomEvent(<span class="string">'myevent'</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">'Hello world'</span>);</div><div class="line">ele.dispatchEvent(event);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;通用的事件监听器&quot;&gt;&lt;a href=&quot;#通用的事件监听器&quot; class=&quot;headerlink&quot; title=&quot;通用的事件监听器&quot;&gt;&lt;/a&gt;通用的事件监听器&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css常见问题解决方案记录</title>
    <link href="http://yoursite.com/2017/11/19/css%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/11/19/css常见问题解决方案记录/</id>
    <published>2017-11-19T10:08:09.095Z</published>
    <updated>2017-11-21T09:05:36.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="inline-block-间隙"><a href="#inline-block-间隙" class="headerlink" title="inline-block 间隙"></a>inline-block 间隙</h2><h2 id="最小字体"><a href="#最小字体" class="headerlink" title="最小字体"></a>最小字体</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform-origin</span>: 0 50%;</div><div class="line">transform: scale(10/12);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;inline-block-间隙&quot;&gt;&lt;a href=&quot;#inline-block-间隙&quot; class=&quot;headerlink&quot; title=&quot;inline-block 间隙&quot;&gt;&lt;/a&gt;inline-block 间隙&lt;/h2&gt;&lt;h2 id=&quot;最小字体&quot;&gt;&lt;a href
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>css常用代码收集</title>
    <link href="http://yoursite.com/2017/11/19/css%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E6%94%B6%E9%9B%86/"/>
    <id>http://yoursite.com/2017/11/19/css常用代码收集/</id>
    <published>2017-11-19T08:43:29.889Z</published>
    <updated>2017-11-19T09:52:19.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单行省略号"><a href="#单行省略号" class="headerlink" title="单行省略号"></a>单行省略号</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</div><div class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</div><div class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</div></pre></td></tr></table></figure>
<h2 id="多行省略号-只适合chrome"><a href="#多行省略号-只适合chrome" class="headerlink" title="多行省略号(只适合chrome)"></a>多行省略号(只适合chrome)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</div><div class="line"><span class="selector-tag">-webkit-box-orient</span>: <span class="selector-tag">vertical</span>;</div><div class="line"><span class="selector-tag">-webkit-line-clamp</span>: 3;</div><div class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</div></pre></td></tr></table></figure>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">clear</span>: both;</div><div class="line">  <span class="attribute">visibility</span>: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="行内元素水平居中"><a href="#行内元素水平居中" class="headerlink" title="行内元素水平居中"></a>行内元素水平居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</div></pre></td></tr></table></figure>
<h2 id="块级元素水平居中"><a href="#块级元素水平居中" class="headerlink" title="块级元素水平居中"></a>块级元素水平居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;</div></pre></td></tr></table></figure>
<h2 id="行内元素垂直居中"><a href="#行内元素垂直居中" class="headerlink" title="行内元素垂直居中"></a>行内元素垂直居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">height</span>: 100<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">line-height</span>: 100<span class="selector-tag">px</span>;</div></pre></td></tr></table></figure>
<h2 id="块级元素垂直居中-已知高度"><a href="#块级元素垂直居中-已知高度" class="headerlink" title="块级元素垂直居中(已知高度)"></a>块级元素垂直居中(已知高度)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">margin-top</span>: -<span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="未知块级元素垂直居中-未知高度"><a href="#未知块级元素垂直居中-未知高度" class="headerlink" title="未知块级元素垂直居中(未知高度)"></a>未知块级元素垂直居中(未知高度)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>flex实现<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="水平垂直居中（宽高度已知）"><a href="#水平垂直居中（宽高度已知）" class="headerlink" title="水平垂直居中（宽高度已知）"></a>水平垂直居中（宽高度已知）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">margin</span>: -<span class="number">150px</span> -<span class="number">150px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="水平垂直居中（宽高度未知）"><a href="#水平垂直居中（宽高度未知）" class="headerlink" title="水平垂直居中（宽高度未知）"></a>水平垂直居中（宽高度未知）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>flex实现<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单行省略号&quot;&gt;&lt;a href=&quot;#单行省略号&quot; class=&quot;headerlink&quot; title=&quot;单行省略号&quot;&gt;&lt;/a&gt;单行省略号&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6常用新特性总结</title>
    <link href="http://yoursite.com/2017/10/28/ES6%E5%B8%B8%E7%94%A8%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/28/ES6常用新特性总结/</id>
    <published>2017-10-28T14:30:10.080Z</published>
    <updated>2017-10-29T02:37:56.249Z</updated>
    
    <content type="html"><![CDATA[<p>es6主要四在react中使用比较多，便结合自己学习react接触的es6和书籍以及网络资源总结一下se6的常用属性。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>let和const</li>
<li>变量的解构赋值</li>
</ul>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li>模板字符串</li>
<li>includes() repeat() 等新方法</li>
</ul>
<h2 id="数值和Math"><a href="#数值和Math" class="headerlink" title="数值和Math"></a>数值和Math</h2><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li>Arrary.from() Array.of() 等新方法</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>箭头函数<br>!note: <a href="https://zhuanlan.zhihu.com/p/26540168" target="_blank" rel="external">什么时候你不能使用箭头函数</a></li>
<li>函数参数的默认值</li>
<li>rest参数</li>
<li>扩展运算符</li>
</ul>
<h2 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h2><ul>
<li>promise</li>
<li>Generator</li>
<li>async</li>
</ul>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul>
<li>import</li>
<li>export</li>
</ul>
<h2 id="类和继承"><a href="#类和继承" class="headerlink" title="类和继承"></a>类和继承</h2><ul>
<li>class</li>
<li>extents</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;es6主要四在react中使用比较多，便结合自己学习react接触的es6和书籍以及网络资源总结一下se6的常用属性。&lt;/p&gt;
&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;ul&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML5新特性总结</title>
    <link href="http://yoursite.com/2017/10/26/HTMNL5%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/26/HTMNL5新特性总结/</id>
    <published>2017-10-26T02:37:15.128Z</published>
    <updated>2017-10-28T10:16:46.094Z</updated>
    
    <content type="html"><![CDATA[<p>这次总结知识罗列出知识点和基本的api,</p>
<h1 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h1><h2 id="新元素"><a href="#新元素" class="headerlink" title="新元素"></a>新元素</h2><p>  1 结构新元素<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artile</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>  2 文本新元素<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">datalist</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">progress</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="设备访问"><a href="#设备访问" class="headerlink" title="设备访问"></a>设备访问</h1><h2 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h2><p>  1 提供定位地点的信息（精读，纬度，海拔）<br>  2 navigator.geolocation.getCurrentPosition(callback)<br>  3 api</p>
<ul>
<li>coords.longitude</li>
<li>coords.lanitude<br>-<a href="http://www.csdn.net/article/2013-06-03/2815511-HTML5-API" target="_blank" rel="external">其他一些设备访问</a></li>
</ul>
<h1 id="离线-本地存储"><a href="#离线-本地存储" class="headerlink" title="离线/本地存储"></a>离线/本地存储</h1><h2 id="web存储"><a href="#web存储" class="headerlink" title="web存储"></a>web存储</h2><p>  1 提供一个比cookie更大的本地存储（5M），而且不上传服务器<br>  2 分为localStorage和sessionStorage，区别是前者不主动删除便永久存在，后者关闭浏览器便会自动清除数据<br>  3 api</p>
<pre><code>- getItem()
- setitem()
- removeItem()
- length()
- clear()
</code></pre><h2 id="web-SQL"><a href="#web-SQL" class="headerlink" title="web SQL"></a>web SQL</h2><h2 id="应用程序缓存"><a href="#应用程序缓存" class="headerlink" title="应用程序缓存"></a>应用程序缓存</h2><p>  1 缓存本地资源<br>  2 启动应用程序缓存需要在html 标签添加属性 manifest=’filename.appcache’<br>  3 缓存文件分为三部分</p>
<pre><code>- 要缓存的资源（CACHE-MANiFEST)
- 不要缓存的资源（NETWORK)
- 找不到页面重定向页面（FALLBACK)
</code></pre><p>  4 缓存更新</p>
<pre><code>- 触动缓存更新方式：清除本地缓存，更新缓存文件
- 一般更新缓存是要更新缓存文件 并且更新注释里的缓存日期和版本号
</code></pre><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h2 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h2><p>  1 开启新的进程在后台执行脚本<br>  2 使用 var w = new Works(‘filename.js’)<br>  3 使用常见，高密集吃内存，cpu的运算</p>
<h1 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h1><h2 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h2><p>  1 server-send-event(服务器推送事件)<br>  2 客户端 var sse= new event-source()<br>  3 服务器端需要设置一个首部为 Content-type: text/event-stream</p>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><h1 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h1><h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><p>  1 适合游戏开发</p>
<h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><ul>
<li>矢量伸缩图，不依赖像素<h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4></li>
<li><a href="http://cubic-bezier.com/" target="_blank" rel="external">在线贝塞尔工具</a></li>
<li><a href="http://snapsvg.io" target="_blank" rel="external">Snap.svg</a></li>
<li><a href="http://bonsaijs.org/" target="_blank" rel="external">bonsai</a><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial" target="_blank" rel="external">SVG -MDN</a></li>
<li><a href="http://www.w3cplus.com/blog/tags/411.html" target="_blank" rel="external">SVG标签 -W3Cplus</a></li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="拖放"><a href="#拖放" class="headerlink" title="拖放"></a>拖放</h2><p>  1 设置要拖放的元素  dragable=true<br>  2 要拖放的数据(ondragstart事件)<br>  3 设置放拖放元素的元素(ondragover  ondrop)</p>
<h2 id="桌面通知（Nodifacation"><a href="#桌面通知（Nodifacation" class="headerlink" title="桌面通知（Nodifacation)"></a>桌面通知（Nodifacation)</h2><ul>
<li><a href="https://segmentfault.com/a/1190000011670082" target="_blank" rel="external">参考</a></li>
</ul>
<h2 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h2><ul>
<li><a href="http://www.csdn.net/article/2013-05-27/2815444-5-html5-features-you-must-know" target="_blank" rel="external">来源</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次总结知识罗列出知识点和基本的api,&lt;/p&gt;
&lt;h1 id=&quot;语义化&quot;&gt;&lt;a href=&quot;#语义化&quot; class=&quot;headerlink&quot; title=&quot;语义化&quot;&gt;&lt;/a&gt;语义化&lt;/h1&gt;&lt;h2 id=&quot;新元素&quot;&gt;&lt;a href=&quot;#新元素&quot; class=&quot;header
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CSS3新特性总结</title>
    <link href="http://yoursite.com/2017/10/26/css3%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/26/css3新特性总结/</id>
    <published>2017-10-26T02:02:27.952Z</published>
    <updated>2017-10-28T09:59:51.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动画相关"><a href="#动画相关" class="headerlink" title="动画相关"></a>动画相关</h2><p>1 过渡（transition）<br>2 转换2D/3D（transform）<br>3 动画（animation）</p>
<h2 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h2><h2 id="背景和渐变"><a href="#背景和渐变" class="headerlink" title="背景和渐变"></a>背景和渐变</h2><ul>
<li>background-image</li>
<li>background-size</li>
<li>background-origin</li>
<li><p>background-clip</p>
</li>
<li><p>线性渐变(linear-gredient)</p>
</li>
<li>径向渐变()</li>
</ul>
<h2 id="文本和字体-多列"><a href="#文本和字体-多列" class="headerlink" title="文本和字体,多列"></a>文本和字体,多列</h2><ul>
<li>text-shadow</li>
<li>text-overflow</li>
<li>word-wrap</li>
<li>word-break</li>
<li><p>box-shadow</p>
</li>
<li><p>columns</p>
</li>
<li><p>@font</p>
</li>
<li><p>媒体查询</p>
</li>
<li>圆角<br>-</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动画相关&quot;&gt;&lt;a href=&quot;#动画相关&quot; class=&quot;headerlink&quot; title=&quot;动画相关&quot;&gt;&lt;/a&gt;动画相关&lt;/h2&gt;&lt;p&gt;1 过渡（transition）&lt;br&gt;2 转换2D/3D（transform）&lt;br&gt;3 动画（animation）&lt;/p
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js基础系列之继承</title>
    <link href="http://yoursite.com/2017/10/25/js%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8B%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF/"/>
    <id>http://yoursite.com/2017/10/25/js基础系列之对象继承/</id>
    <published>2017-10-25T04:34:39.494Z</published>
    <updated>2017-11-27T15:56:01.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1 原型链继承"></a>1 原型链继承</h2><p>基本思想是通过原型让一个引用类型原型对象继承<br>另一个引用类型的示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.subProperty = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 继承SuperType</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div></pre></td></tr></table></figure></p>
<p>原型链继承的两个问题：<br>1 包含了引用类型值的原型，引用类型值的原型的属性会被所以属性共享<br>2 在创建子类型实例时，不能向超类型的构造函数中传递参数</p>
<h2 id="2-借用构造函数"><a href="#2-借用构造函数" class="headerlink" title="2 借用构造函数"></a>2 借用构造函数</h2><p> 基本思想是在子类构造函数的内部调用超类型构造函数，通过使用apply和call()方法<br> 在新创建的对象上执行构造函数<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 继承SuperType</span></div><div class="line">  SuperType.call(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</div><div class="line">instance1.colors.push(<span class="string">"black"</span>);</div><div class="line"><span class="built_in">console</span>.log(instance1.colors); <span class="comment">// "red, blue, green, black"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</div><div class="line"><span class="built_in">console</span>.log(instance2.colors)    <span class="comment">// "red, blue, green"</span></div></pre></td></tr></table></figure></p>
<p><strong>传递参数</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name= name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 继承SuperType同时传递参数</span></div><div class="line">  SuperType.call(<span class="keyword">this</span>, <span class="string">"jack"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance  = <span class="keyword">new</span> SubType();</div><div class="line"><span class="built_in">console</span>.log(instance.name);    <span class="comment">// "jack"</span></div></pre></td></tr></table></figure></p>
<p>借用构造函数继承的问题：<br> 1 方法都在构造函数中定义，因此函数不能复用</p>
<h2 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3 组合继承"></a>3 组合继承</h2><p>将原型链与借用构造函数组合到一起，基本思想是使用原型链实现对原型属性和方法的继承，<br>通过构造函数实现对实例属性的继承<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">  SuperType.call(<span class="keyword">this</span>, name);</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 继承方法</span></div><div class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line">SubType.prototype.constructor = SubType;</div><div class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">"Nicholas"</span>, <span class="number">35</span>),</div><div class="line">    instance2 = <span class="keyword">new</span> SubType(<span class="string">"Greg"</span>, <span class="number">20</span>);</div><div class="line"></div><div class="line">instance1.colors.push(<span class="string">"black"</span>);</div><div class="line"><span class="built_in">console</span>.log(instance1.colors);</div><div class="line"><span class="built_in">console</span>.log(instance2.colors);</div><div class="line"><span class="built_in">console</span>.log(instance1.sayName());</div><div class="line"><span class="built_in">console</span>.log(instance2.sayName());</div><div class="line"><span class="built_in">console</span>.log(instance1.sayAge());</div><div class="line"><span class="built_in">console</span>.log(instance2.sayAge());</div></pre></td></tr></table></figure></p>
<h2 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h2><p>还有原型是继承，寄生式继承和寄生组合式继承</p>
<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>自己在编程中用到继承的场景很少，需要慢慢发现使用场景</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-原型链继承&quot;&gt;&lt;a href=&quot;#1-原型链继承&quot; class=&quot;headerlink&quot; title=&quot;1 原型链继承&quot;&gt;&lt;/a&gt;1 原型链继承&lt;/h2&gt;&lt;p&gt;基本思想是通过原型让一个引用类型原型对象继承&lt;br&gt;另一个引用类型的示例&lt;br&gt;&lt;figure cl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML标签总结</title>
    <link href="http://yoursite.com/2017/10/23/HTML%E6%A0%87%E7%AD%BE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/23/HTML标签总结/</id>
    <published>2017-10-23T03:41:43.608Z</published>
    <updated>2017-10-23T04:39:31.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见块级元素"><a href="#常见块级元素" class="headerlink" title="常见块级元素"></a>常见块级元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">h1</span>&gt;</span> <span class="tag">&lt;<span class="name">h2</span>&gt;</span> ... <span class="tag">&lt;<span class="name">h6</span>&gt;</span> <span class="tag">&lt;<span class="name">form</span>&gt;</span> <span class="tag">&lt;<span class="name">ul</span>&gt;</span> <span class="tag">&lt;<span class="name">ol</span>&gt;</span> <span class="tag">&lt;<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="常见的内联元素"><a href="#常见的内联元素" class="headerlink" title="常见的内联元素"></a>常见的内联元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">abbr</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">em</span>&gt;</span> <span class="tag">&lt;<span class="name">strong</span>&gt;</span> <span class="tag">&lt;<span class="name">b</span>&gt;</span> <span class="tag">&lt;<span class="name">sub</span>&gt;</span> <span class="tag">&lt;<span class="name">sup</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="需要区分细节的标签"><a href="#需要区分细节的标签" class="headerlink" title="需要区分细节的标签"></a>需要区分细节的标签</h2><p>1 表现型标签 可以用css代替<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span> 表现为粗体文本效果</div><div class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span> 表现为斜体文本效果</div><div class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span> 表现为大号字体效果</div><div class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span> 表现为小号字体效果</div></pre></td></tr></table></figure></p>
<p>2 拥有确切的语义的标签<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span> 文本定义为强调的内容</div><div class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span> 文本定义为语气更强的强调内容</div><div class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span> 定义计算机代码文本</div><div class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span> 定义键盘文本</div><div class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span> 定义引用</div><div class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span> 定义变量</div></pre></td></tr></table></figure></p>
<h2 id="html5常用语义标签"><a href="#html5常用语义标签" class="headerlink" title="html5常用语义标签"></a>html5常用语义标签</h2><p>```html</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://caibaojian.com/html5/" target="_blank" rel="external">HTML5手册</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常见块级元素&quot;&gt;&lt;a href=&quot;#常见块级元素&quot; class=&quot;headerlink&quot; title=&quot;常见块级元素&quot;&gt;&lt;/a&gt;常见块级元素&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>响应式Web设计总结</title>
    <link href="http://yoursite.com/2017/10/16/%E5%93%8D%E5%BA%94%E5%BC%8FWeb%E8%AE%BE%E8%AE%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/16/响应式Web设计总结/</id>
    <published>2017-10-16T11:37:46.848Z</published>
    <updated>2017-10-16T11:52:04.793Z</updated>
    
    <content type="html"><![CDATA[<p>先挖坑</p>
<h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><ul>
<li><a href="https://book.douban.com/subject/20390374/" target="_blank" rel="external">响应式Web设计</a></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://beforweb.com/node/6/page/0/3" target="_blank" rel="external">什么是响应式Web设计？怎样进行？</a>\</li>
<li><a href="http://www.uisdc.com/9-responsive-web-design-principle#" target="_blank" rel="external">响应式Web设计的9项基本原则</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先挖坑&lt;/p&gt;
&lt;h2 id=&quot;todo&quot;&gt;&lt;a href=&quot;#todo&quot; class=&quot;headerlink&quot; title=&quot;todo&quot;&gt;&lt;/a&gt;todo&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/2039
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跨域之CORS实践</title>
    <link href="http://yoursite.com/2017/10/16/%E8%B7%A8%E5%9F%9F%E4%B9%8BCORS%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2017/10/16/跨域之CORS实践/</id>
    <published>2017-10-16T10:30:31.161Z</published>
    <updated>2017-10-16T11:47:58.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是跨域资源共享"><a href="#什么是跨域资源共享" class="headerlink" title="什么是跨域资源共享"></a>什么是跨域资源共享</h2><p>是一种使用自定义的HTTP头部让浏览器与服务器进行沟通的解决方案，在发送请求时，会附加一个Origin头部，服务器根据这个头部来响应</p>
<h2 id="基本的实现方式（简单请求）"><a href="#基本的实现方式（简单请求）" class="headerlink" title="基本的实现方式（简单请求）"></a>基本的实现方式（简单请求）</h2><p>在服务器端设置 Access-Control-Allow-Origin 为 * 或者请求地址<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'http://192.168.199.130:8000'</span></div></pre></td></tr></table></figure></p>
<h2 id="Preflighted-Requests"><a href="#Preflighted-Requests" class="headerlink" title="Preflighted Requests"></a>Preflighted Requests</h2><p>使用自定义HTTP头部，或者使用GET或POST之外的请求，就会向服务器发送一个Preflight请求，这种请求使用OPTIONS方法，发送一下头部</p>
<ul>
<li>Origin：与简单请求一样</li>
<li>Access-Control-Request-Method: 请求自身使用的方法(OPTIONS)</li>
<li>Access-Control-Request-Headers: 自定义的头部信息(可选)</li>
</ul>
<p>客户端示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xhr.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>)</div><div class="line">xhr.setRequestHeader(<span class="string">'X-PINGOTHER'</span>, <span class="string">'pingpong'</span>)</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure></p>
<p>通过一个带有自定义的HTTP头部的的POST请求来触发发送Preflight请求</p>
<p>服务器端通过发送如下HTTP头部告诉客户端是否允许这种类型的请求</p>
<ul>
<li>Access-Control-Allow-Origin: 与简单请求一样</li>
<li>Access-Control-Allow-Methods: 允许的方法</li>
<li>Access-Control-Allow-Headers: 允许客户端自定义的头部</li>
<li>Access-Control-Max-Age: 缓存这个Preflight请求的时间（秒为单位，可选）</li>
</ul>
<p>服务器端示例（node服务器）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (req.method === <span class="string">'OPTIONS'</span>) &#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">    <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'http://192.168.199.130:8000'</span>,</div><div class="line">    <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'GET, POST, OPTIONS'</span>,</div><div class="line">    <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'X-PINGOTHER'</span>,</div><div class="line">    <span class="string">'Access-Control-Max-Age'</span>: <span class="number">1000</span></div><div class="line">  &#125;)</div><div class="line">  res.end()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Preflight请求付出的代价就是在第一次请求时会多一次HTTP请求（在缓存时间内）<br>IE10及更早版本不支持</p>
<h2 id="带凭据的请求"><a href="#带凭据的请求" class="headerlink" title="带凭据的请求"></a>带凭据的请求</h2><p>默认情况下，跨域请求不提供凭据（cookie、HTTP认证及SSH证明等），客户端通过将withCredentials属性设置为true，可以指定某个请求发送凭据  如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = createXHR()</div><div class="line">xhr.withCredentials = <span class="literal">true</span>;</div></pre></td></tr></table></figure></p>
<p>如果服务器接收带凭据的请求，会用如下HTTP头部响应<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'Access-Control-Allow-Credentials'</span>: <span class="string">'true'</span>,</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CORS的兼容性需要考虑，兼容IE10+，IE中有XDR能实现类似的跨域通信，后面单独介绍<br>同时遇到一个问题是带凭据请求中的cookie不能读取</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解 -阮一峰</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">CORS -MDN</a></li>
<li>JavaScript高级程序编程</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是跨域资源共享&quot;&gt;&lt;a href=&quot;#什么是跨域资源共享&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域资源共享&quot;&gt;&lt;/a&gt;什么是跨域资源共享&lt;/h2&gt;&lt;p&gt;是一种使用自定义的HTTP头部让浏览器与服务器进行沟通的解决方案，在发送请求时，会附
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node实现静态web服务器实践</title>
    <link href="http://yoursite.com/2017/10/14/node%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2017/10/14/node实现一个静态web服务器/</id>
    <published>2017-10-14T09:59:22.966Z</published>
    <updated>2017-10-14T10:40:09.504Z</updated>
    
    <content type="html"><![CDATA[<p>其实一开始我只是想通过node来实现获取前端发送的表单数据，一方面熟悉node基础，另一方面是是熟悉HTTP头部字段，后来慢慢发现这是静态web服务器所做的事情，而我一直使用的anywhere也是做类似的事情(精简版)，很实用。</p>
<h2 id="node技术点"><a href="#node技术点" class="headerlink" title="node技术点"></a>node技术点</h2><p>1 http模块<br>2 fs path url模块<br>3 connenct中间件模块<br>4 http缓存机制原理</p>
<h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p>1 熟练使用node常用模块<br>2 做一个类似anywhere但功能更丰富的web服务器并学习用npm发布<br>3 在熟悉node基础之上做一个express版本的<br>4 学习使用命令行工具curl模拟发送请求(类似工具httpie)</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://www.toolmao.com/nodejs-static-server" target="_blank" rel="external">用NodeJS来实现静态文件服务器</a></li>
<li><a href="http://www.cnblogs.com/chenqf/p/6386163.html" target="_blank" rel="external">彻底弄懂HTTP缓存机制及原理</a></li>
<li><a href="http://www.cnblogs.com/zamhown/p/6429163.html" target="_blank" rel="external">使用Node.js快速搭建简单的静态文件服务器</a></li>
<li><a href="http://web.jobbole.com/91084/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts" target="_blank" rel="external">浏览器缓存机制剖析</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实一开始我只是想通过node来实现获取前端发送的表单数据，一方面熟悉node基础，另一方面是是熟悉HTTP头部字段，后来慢慢发现这是静态web服务器所做的事情，而我一直使用的anywhere也是做类似的事情(精简版)，很实用。&lt;/p&gt;
&lt;h2 id=&quot;node技术点&quot;&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js基础系列之BOM</title>
    <link href="http://yoursite.com/2017/10/13/js%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E4%B9%8BBOM/"/>
    <id>http://yoursite.com/2017/10/13/js基础系列之BOM/</id>
    <published>2017-10-13T00:13:11.822Z</published>
    <updated>2017-10-14T11:32:20.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><h3 id="窗口位置"><a href="#窗口位置" class="headerlink" title="窗口位置"></a>窗口位置</h3><p>  screenLeft<br>  screenTop<br>  注意兼容性</p>
<h3 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h3><p> innerWidth<br> innerHeight<br> outerWidth<br> outerHeight<br> 注意兼容性<br> resizeTo()<br> resizeBy()<br> 调整窗口大小、</p>
<h2 id="导航和打开窗口"><a href="#导航和打开窗口" class="headerlink" title="导航和打开窗口"></a>导航和打开窗口</h2><p>open()<br>close()</p>
<h2 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h2><p>alert()<br>confirm()<br>prompt()</p>
<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>location对象既是window对象的属性，也是document的属性，不仅保存当前文档信息，还将URL解析为独立的片段</p>
<p>###属性<br>search(最常用)<br>hash<br>host<br>hostname<br>port<br>href<br>protocol<br>pathname</p>
<h3 id="位置操作"><a href="#位置操作" class="headerlink" title="位置操作"></a>位置操作</h3><p>location.assign(URL)<br>location.href(URL)<br>window.location(URL)<br>location.replace(URL)  不会生成历史记录<br>location.reload()       有可能从缓存中加载<br>location.reload(true)  从服务器重新加载</p>
<h2 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h2><p>  识别客户端浏览器的标准</p>
<h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>  保存用户上网的历史记录<br> go() 参数可以是数值也可以是字符串<br> back()<br> forward()<br> length()</p>
<h2 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h2><p> 包含显示器信息，实用少</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;window对象&quot;&gt;&lt;a href=&quot;#window对象&quot; class=&quot;headerlink&quot; title=&quot;window对象&quot;&gt;&lt;/a&gt;window对象&lt;/h2&gt;&lt;h3 id=&quot;窗口位置&quot;&gt;&lt;a href=&quot;#窗口位置&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编写高质量的HTML</title>
    <link href="http://yoursite.com/2017/10/07/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84html/"/>
    <id>http://yoursite.com/2017/10/07/编写高质量的html/</id>
    <published>2017-10-07T03:20:44.292Z</published>
    <updated>2017-10-14T02:05:06.540Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p>
<p>本来知识想写一边关于html标签语义化的，但是发现&lt;编写高质量代码 -Web前端开发修炼之道&gt;里面的知识点更系统，再补上html5的就更全面了</p>
<h2 id="html的语义化"><a href="#html的语义化" class="headerlink" title="html的语义化"></a>html的语义化</h2><ul>
<li>根据内容的结构化，选择适合的标签编写对开发者和浏览器友好的代码</li>
<li>html的作用是提供上下文结构和含义</li>
</ul>
<h2 id="语义化的目的"><a href="#语义化的目的" class="headerlink" title="语义化的目的"></a>语义化的目的</h2><p>  1 没有样式依然呈现清晰的结构<br>  2 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备），提高网页的可访问性<br>  3 有利用SEO<br>  4 便于团队开发和维护</p>
<h2 id="标签语义化的检测"><a href="#标签语义化的检测" class="headerlink" title="标签语义化的检测"></a>标签语义化的检测</h2><p>  去掉样式，浏览器会根据标签的语义给定一个默认样式，看网页是否组织良好，是否有很好的可读性</p>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>  1 经可能少的使用无语义的标签div和span<br>  2 不要使用纯样式标签，用css代替<br>  3 需要强调的内容放在标签strong或者em<br>  3 每个input标签对应的说明文本都需要使用label标签</p>
<h2 id="常见的语义化标签"><a href="#常见的语义化标签" class="headerlink" title="常见的语义化标签"></a>常见的语义化标签</h2><h3 id="html5结构语义化标签"><a href="#html5结构语义化标签" class="headerlink" title="html5结构语义化标签"></a>html5结构语义化标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;<span class="name">aside</span>&gt;</span></div></pre></td></tr></table></figure>
<p>很明显，可以参考各种框架的写法 下面是两个HTML框架</p>
<ul>
<li><a href="http://amazeui.org/" target="_blank" rel="external">Amaze UI</a></li>
<li><a href="http://zui.sexy/#/" target="_blank" rel="external">ZUI</a></li>
</ul>
<p><a href="http://www.html5jscss.com/html5-semantics-section.html" target="_blank" rel="external">参考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;本来知识想写一边关于html标签语义化的，但是发现&amp;lt;编写高质量代码 -Web前端开发修炼之道&amp;gt;里面的知识点更系统，再补上html5的就更全面了&lt;/p&gt;
&lt;h2 id=&quot;html的语义化&quot;&gt;&lt;a href=&quot;#html的语义化&quot; clas
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端通信实践</title>
    <link href="http://yoursite.com/2017/10/06/%E5%89%8D%E7%AB%AF%E9%80%9A%E4%BF%A1%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2017/10/06/前端通信实践/</id>
    <published>2017-10-06T05:10:56.230Z</published>
    <updated>2017-10-14T02:05:09.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>##</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h2&gt;&lt;p&gt;##&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>heroku 配合 mLab部署node应用</title>
    <link href="http://yoursite.com/2017/10/06/heroku%E9%83%A8%E7%BD%B2node%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2017/10/06/heroku部署node应用/</id>
    <published>2017-10-06T03:34:26.110Z</published>
    <updated>2017-10-06T04:39:42.003Z</updated>
    
    <content type="html"><![CDATA[<p>部署后的 <a href="https://frozen-sierra-55614.herokuapp.com/posts" target="_blank" rel="external">网站</a></p>
<p>按照参考基本没什么问题，但是速度确实慢,而且经常出现超时问题，超时限制是30秒。以后还可以做更多的扩展，比如分类导航栏，文章列表中的每个列表介绍只显示一部分，添加阅读更多导航等，还有分页。</p>
<p><a href="https://github.com/nswbmw/N-blog/blob/master/book/4.15%20%E9%83%A8%E7%BD%B2.md" target="_blank" rel="external">参考文章</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部署后的 &lt;a href=&quot;https://frozen-sierra-55614.herokuapp.com/posts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;按照参考基本没什么问题，但是速度确实慢,而且经常出现超时问
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记freeCodeCamp数字格式转化练习题</title>
    <link href="http://yoursite.com/2017/09/11/freeCodeCamp/"/>
    <id>http://yoursite.com/2017/09/11/freeCodeCamp/</id>
    <published>2017-09-11T03:35:49.171Z</published>
    <updated>2017-10-14T02:05:13.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="阿拉伯数字转化为罗马数字-转化细节"><a href="#阿拉伯数字转化为罗马数字-转化细节" class="headerlink" title="阿拉伯数字转化为罗马数字,转化细节"></a>阿拉伯数字转化为罗马数字,<a href="http://www.shuxuele.com/roman-numerals.html" target="_blank" rel="external">转化细节</a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToRoman</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = <span class="built_in">String</span>(num).split(<span class="string">''</span>);</div><div class="line">  <span class="keyword">var</span> formatNum = [</div><div class="line">  [<span class="string">'I'</span>,<span class="string">'II'</span>,<span class="string">'III'</span>,<span class="string">'IV'</span>,<span class="string">'V'</span>,<span class="string">'VI'</span>,<span class="string">'VII'</span>,<span class="string">'VIII'</span>,<span class="string">'IX'</span>],</div><div class="line">  [<span class="string">'X'</span>,<span class="string">'XX'</span>,<span class="string">'XXX'</span>,<span class="string">'XL'</span>,<span class="string">'L'</span>,<span class="string">'LX'</span>,<span class="string">'LXX'</span>,<span class="string">'LXXX'</span>,<span class="string">'XC'</span>],</div><div class="line">  [<span class="string">'C'</span>,<span class="string">'CC'</span>,<span class="string">'CCC'</span>,<span class="string">'CD'</span>,<span class="string">'D'</span>,<span class="string">'DC'</span>,<span class="string">'DCC'</span>,<span class="string">'DCCC'</span>,<span class="string">'CM'</span>],</div><div class="line">  [<span class="string">'M'</span>,<span class="string">'MM'</span>,<span class="string">'MMM'</span>]</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">var</span> res = arr.reverse().map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> formatNum[index][item<span class="number">-1</span>];</div><div class="line">&#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> res.reverse().join(<span class="string">''</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  一个重要的点是构造了一个二维数组来利用map函数</p>
<hr>
<h2 id="对象之间是否存在包含关系练习题"><a href="#对象之间是否存在包含关系练习题" class="headerlink" title="对象之间是否存在包含关系练习题"></a>对象之间是否存在包含关系练习题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">whatIsInAName</span>(<span class="params">collection, source</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> keysArr = <span class="built_in">Object</span>.keys(source);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> collection.filter(<span class="function"><span class="keyword">function</span>(<span class="params">itemObj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> keysArr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> source[item] == itemObj[item];</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">whatIsInAName([&#123; <span class="attr">first</span>: <span class="string">"Romeo"</span>, <span class="attr">last</span>: <span class="string">"Montague"</span> &#125;, &#123; <span class="attr">first</span>: <span class="string">"Mercutio"</span>, <span class="attr">last</span>: <span class="literal">null</span> &#125;, &#123; <span class="attr">first</span>: <span class="string">"Tybalt"</span>, <span class="attr">last</span>: <span class="string">"Capulet"</span> &#125;], &#123; <span class="attr">last</span>: <span class="string">"Capulet"</span> &#125;);</div></pre></td></tr></table></figure>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>在数组的迭代方法filter中又嵌套一个every方法，增加了对数组几个迭代方法的理解和返回值的准确应用。</p>
<h2 id="多数组去重"><a href="#多数组去重" class="headerlink" title="多数组去重"></a>多数组去重</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniteUnique</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="comment">// 把所有参数放入一个真正的数组里面</span></div><div class="line">  <span class="keyword">var</span> newArr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div><div class="line">  <span class="comment">// 合并为一个数组</span></div><div class="line">  <span class="keyword">var</span> res = newArr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> prev.concat(cur);</div><div class="line">  &#125;);</div><div class="line">  <span class="comment">// es6方法数组去重</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(res));</div><div class="line">&#125;</div><div class="line"></div><div class="line">uniteUnique([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>], [<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">1</span>]);</div></pre></td></tr></table></figure>
<h2 id="递归的运用练习题"><a href="#递归的运用练习题" class="headerlink" title="递归的运用练习题"></a>递归的运用练习题</h2><ul>
<li>大概题意：函数fbo()等于前两项之和，前两项都是1 ，给指定数字num,求fbo(i)小于或等于 num时其结果为奇数的各项之和</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumFibs</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> res = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="comment">// fbo函数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fbo</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n ==<span class="number">1</span> || n == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> fbo(n<span class="number">-1</span>) + fbo(n<span class="number">-2</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 用for循环确定满足条件的项数</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; fbo(i) &lt;= n; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (fbo(i) % <span class="number">2</span> != <span class="number">0</span>) &#123;</div><div class="line">      res += fbo(i);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sumFibs(<span class="number">4</span>);</div><div class="line">sumFibs(<span class="number">75025</span>);</div></pre></td></tr></table></figure>
<p>总结 ： 让我纠结的不是递归  而是for循环 ，因为不在是常规的 for(var i = 0; i &lt; num; i++), 而这三项每项都可以改变成不同的形式，正是对平常固定思维的考验。</p>
<h2 id="js指定范围内素数求和"><a href="#js指定范围内素数求和" class="headerlink" title="js指定范围内素数求和"></a>js指定范围内素数求和</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumPrimes</span>(<span class="params">num</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 构造一个数组方便使用数组的迭代方法</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">arr</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> res =[];</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">2</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</div><div class="line">      res.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 确定素数</span></div><div class="line">  <span class="keyword">var</span> resArr = arr(num).filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr(index + <span class="number">1</span>).every(<span class="function"><span class="keyword">function</span>(<span class="params">subItem</span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> item % subItem !== <span class="number">0</span>;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// 素数求和</span></div><div class="line">  <span class="keyword">return</span> resArr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> prev + cur;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">sumPrimes(<span class="number">10</span>);</div><div class="line">sumPrimes(<span class="number">977</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;阿拉伯数字转化为罗马数字-转化细节&quot;&gt;&lt;a href=&quot;#阿拉伯数字转化为罗马数字-转化细节&quot; class=&quot;headerlink&quot; title=&quot;阿拉伯数字转化为罗马数字,转化细节&quot;&gt;&lt;/a&gt;阿拉伯数字转化为罗马数字,&lt;a href=&quot;http://www.sh
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2017/09/07/test/"/>
    <id>http://yoursite.com/2017/09/07/test/</id>
    <published>2017-09-07T09:34:10.773Z</published>
    <updated>2017-09-07T09:58:45.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="title1"><a href="#title1" class="headerlink" title="title1"></a>title1</h2><ul>
<li>nice</li>
</ul>
<h2 id="title2"><a href="#title2" class="headerlink" title="title2"></a>title2</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="title3"><a href="#title3" class="headerlink" title="title3"></a>title3</h2><blockquote>
<p>ge</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;title1&quot;&gt;&lt;a href=&quot;#title1&quot; class=&quot;headerlink&quot; title=&quot;title1&quot;&gt;&lt;/a&gt;title1&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;nice&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;title2&quot;&gt;&lt;a href=&quot;#title2
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/09/05/hello-world/"/>
    <id>http://yoursite.com/2017/09/05/hello-world/</id>
    <published>2017-09-05T02:41:33.458Z</published>
    <updated>2017-09-07T09:43:23.407Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
